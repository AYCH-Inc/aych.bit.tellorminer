This file is the Setup to build from src. 

For those non-Go programmers, the proper setup for the project is:

$HOME/<whatever>
|
---bin
---pkg
---src
   |
   ---github.com
      |
      ---tellor-io
         |
         ---TellorMiner

The TellorMiner dir is generated by running "git clone https://github.com/tellor-io/TellorMiner inside 
the $HOME/<whatever>/src/github.com/tellor-io directory 

Set GOPATH to $HOME/<whatever>
Set GOBIN to $HOME/<whatever>/bin 

Initial setup needs dependencies. Do this:
1) cd into $HOME/<whatever>/src/github.com/tellor-io/
2) run "go get -d ./TellorMiner"


Now you're ready to build/test


When building/testing, go into src/github.com/tellor-io/TellorMiner and run "go test ./<package-to-test> -config=<path to config>
e.g.  go test -v ./tracker  
or to run
go run C:/company/code/go/src/github.com/tellor-io/TellorMiner/main.go -config=C:/company/code/go/src/github.com/tellor-io/TellorMiner/config.json
and it will test from there.


Now edit the config.json file with your private key, public key, and node_url (the rest are advanced options)

The privateKey, publicKey, and nodeUrl all are dummies.  If you want to run it on localhost, you'll need to deploy a Tellor Contract. Docmumentation on that can be found here:
https://github.com/tellor-io/TellorCore

But if you just want to try it rinkeby, use an infura id and kick it off. Note, you'll need tokens from us to stake as a Miner (on mainnet or Rinkeby). For more info, shoot us email at info@tellor.io or join our discord

For running the file:

./runMain.sh -miner -dataServer

Note it will kick off both the miner and the database

To transfer tributes

go run ./main.go -transfer -to=<0x...toaddress....> -amount=<number of tributes> -config=./config.json -psrPath=./psr2.json -logConfig=./loggingConfig.json

e.g. go run ./main.go -transfer -to=0x2f51c4bf6b66634187214a695be6cdd344d4e9d1 -amount=100 -config=./config.json -psrPath=./psr2.json -logConfig=./loggingConfig.json

To deposit your stake initially (assuming you have 1000 Tributes)

go run ./main.go -deposit -config=./config.json -psrPath=./psr2.json -logConfig=./loggingConfig.json 


NOTES:


{
    "requestID":3,
    "symbol":"BNB/USD - Binance DEX",
    "apis":[
        "json(https://dex.binance.org/api/v1/klines?symbol=BNB_USDSB-1AC&interval=1d&limit=1).0.4"
    ],
    "transformation" : "value",
    "granularity" : 1000
},
{
    "requestID":4,
    "symbol":"BTC/USD", 
    "apis":[
        "json(https://api.gdax.com/products/ETH-BTC/ticker).price",
        "json(https://api.binance.com/api/v1/klines?symbol=BTCUSDT&interval=1d&limit=1).0.4",
        "json(https://api.coindesk.com/v1/bpi/currentprice.json).bpi.USD.rate"
    ],
    "transformation" : "median",
    "granularity" : 1000
},
{
    "requestID":5,
    "symbol":"ETH/BTC - Binance",
    "apis":[
        "json(https://api.binance.com/api/v1/klines?symbol=ETHBTC&interval=1d&limit=1).0.4"
    ],
    "transformation" : "value",
    "granularity" : 1000
}




{
    "requestID":1,
    "symbol":"ETH/USD - GDAX",
    "apis":[
        "json(https://api.gdax.com/products/ETH-USD/ticker).price"
    ],
    "transformation" : "value",
    "granularity" : 1000
},